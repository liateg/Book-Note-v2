// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  username     String    @unique
  email        String    @unique
  passwordHash String
  avatarUrl    String?
  createdAt    DateTime  @default(now())
  Post         Post[]
  Note         Note[]
  Comment      Comment[]
  Like         Like[]
}

model BookAuthor {
  id     Int    @id @default(autoincrement())
  book   Book   @relation(fields: [bookId], references: [id])
  bookId Int
  name   String
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum AiType {
  SUMMARY
  LABEL
}

model Post {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  book       Book       @relation(fields: [bookId], references: [id])
  bookId     Int
  reviewText String
  rating     Int?
  visibility Visibility @default(PUBLIC)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

    comments Comment[] @relation("PostComments")
    likes Like[] @relation("Postlikes")
    aicontents AiContent[] @relation("Postaicontents")

}

model Note {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  noteText  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id          Int      @id @default(autoincrement())
  // post        Post     @relation(fields: [postId], references: [id])
  post      Post @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade) // onDelete here
  postId    Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  commentText String
  createdAt   DateTime @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation("Postlikes",fields: [postId], references: [id],onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model AiContent {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  post      Post     @relation("Postaicontents",fields: [postId], references: [id],onDelete: Cascade)
  postId    Int
  type      AiType
  content   String
  createdAt DateTime @default(now())
}

model Book {
  id            Int      @id @default(autoincrement())
  title         String
  coverUrl      String?
  publishedYear Int?
  ISBN          String?  
  edition_key String? 
  cover_edition_key String? 
  cover_id String? 
  createdAt     DateTime @default(now())

  authors    BookAuthor[]
  posts      Post[]
  notes      Note[]
  aiContents AiContent[]
}
